name: Build & Deploy Flutter APK (BK-Witten APP)

on:
  push:
    branches:
      - main

jobs:
  # ======================
  # 1. Build job
  # ======================
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Flutter SDK
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'

      # 3. Accept Android licenses
      - name: Accept Android licenses
        run: yes | flutter doctor --android-licenses

      # 4. Verify Flutter environment (Crucial for debugging)
      - name: Flutter doctor
        run: flutter doctor -v

      # 5. Clean previous builds to avoid old artifacts
      - name: Clean Flutter build
        run: flutter clean
        working-directory: frontend

      # 6. Install dependencies from pubspec.yaml
      - name: Install dependencies
        run: flutter pub get
        working-directory: frontend

      # 7. Build the release APK from your actual code
      - name: Build APK
        run: flutter build apk --release
        working-directory: frontend

      # 8. Debug: List generated files to ensure APK exists and is correctly named
      - name: List build outputs
        run: ls -R build/app/outputs/flutter-apk
        working-directory: frontend

      # 9. Upload the generated APK as an artifact for the next job
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: frontend/build/app/outputs/flutter-apk/app-release.apk

  # ======================
  # 2. Deploy job
  # ======================
  deploy:
    # This job depends on a successful build
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 1. Download the APK artifact built in the previous job
      - name: Download built APK
        uses: actions/download-artifact@v4
        with:
          name: release-apk
          path: ./apk  # Save the artifact into ./apk directory

      # 2. Debug: List downloaded files to confirm APK is available
      - name: List downloaded files
        run: ls -R ./apk

      # 3. Copy APK to remote server via SCP
      - name: Copy APK to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          
          # Transfer APK to the server
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 ./apk/app-release.apk \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/nginx-apk/apk/BK-Witten/app-release.apk

      # 4. Generate update.json dynamically
      - name: Generate update.json
        run: |
          VERSION=$(grep '^version:' frontend/pubspec.yaml | cut -d ' ' -f2)
          echo "Building update.json for version $VERSION"
          
          cat <<EOF > update.json
          {
            "version": "$VERSION",
            "url": "https://${{ secrets.SSH_HOST }}/apk/BK-Witten/app-release.apk"
          }
          EOF
          
          cat update.json

      # 5. Upload update.json to server
      - name: Upload update.json
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 update.json \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/nginx-apk/update.json

      # 6. Optional: Verify remote files
      - name: Verify remote APK & update.json
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            ls -lh ~/nginx-apk/apk/BK-Witten
            cat ~/nginx-apk/update.json
